mutex mtx
condvar prod, cons;
int nprod=0,ncons=0 //n de prod/cons abiertos
cbuffer_t cbuffer

fifoproc_open(file, buffer, size, offset){
  lock(mtx);
  if (lector){
   cons_count++;
   cond_signal(prod);
   while(prod_count==0)   
     cond_wait(cons,mtx) 
  }else { #escritor
   prod_count++;
   cond_signal(cons);
   while(cons_count==0)
     cond_wait(prod,mtx);
  }
  unlock(mtx);
}

fifoproc_write(buff, len){
  char kbuf[MAX_KBUF];

  if(len > MAX_CBUFFER_LEN || len < MAX_BUFFER)
    return 
  if(copy_from_user(kbuf,buf,len))
    return 

  lock(mtx);
  
  while(nr_gaps_cbuffer_t(cbuffer < len && cons_count > 0)
    cond_wait(prod,mtx)
  
  insert_items_cbuffer_t(cbuffer,kbuf,len)

  cond_signal(cons)
  unlock(mtx) 
}

fifoproc_read(buff, len){
  char kbuf[MAX];
  
  if (len>MAX)
     return -ENOSPC;
  #Mas condiciones?

  lock(mtx);
  	   
  #Espera si no hay elem o productores
  while(size_cbuffer(cbuffer)<len && prod_count>0)
    cont_wait(cons,mtx);
  
  #Fin de la conexion
  if (is_empty(cbuffer) && prod_count ==0) {
     unlock(m);
     return 0;
  }

  remove_items_cbuffer_t(cbuffer,kbuf,len);

  cond_signal(prod);

  unlock(mtx);
}

fifoproc_release{
  lock(mtx);
  if (reader) {
     cons_count--;
     cond_signal(prod);
  }else {
     prod_count--;
     cons_signal(cons);
  }
  if (cons_count == 0 && prod_count ==0)
     clear_cbuffer(cbuffer);
  unlock(mtx);
}
