/* Generated By:JavaCC: Do not edit this line. AnalizadorSintactico.java */
package asint;

public class AnalizadorSintactico implements AnalizadorSintacticoConstants {

  final public void Sp() throws ParseException {
    S();
    jj_consume_token(0);
  }

  final public void S() throws ParseException {
    D();
    jj_consume_token(amp);
    I();
  }

  final public void D() throws ParseException {
    T();
    jj_consume_token(id);
    Df();
  }

  final public void T() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case num:
      jj_consume_token(num);
      break;
    case bool:
      jj_consume_token(bool);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Df() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case semicolon:
      jj_consume_token(semicolon);
      D();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void I() throws ParseException {
    jj_consume_token(id);
    jj_consume_token(assign);
    E0();
    If();
  }

  final public void If() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case semicolon:
      jj_consume_token(semicolon);
      I();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  final public void E0() throws ParseException {
    E1();
    E0a();
  }

  final public void E0a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
    case ne:
    case ge:
    case gt:
    case le:
    case lt:
      T0();
      break;
    case or:
      OP0b();
      E0();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void T0() throws ParseException {
    OP0a();
    E1();
  }

  final public void E1() throws ParseException {
    E2();
    E1r();
  }

  final public void E1r() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case add:
    case sub:
      OP1();
      E2();
      E1r();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    T2();
  }

  final public void T2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
    case div:
      OP2a();
      E3();
      T2();
      break;
    case and:
      OP2b();
      E3();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sub:
      jj_consume_token(sub);
      E4();
      break;
    case add:
      jj_consume_token(add);
      E4();
      break;
    case not:
      jj_consume_token(not);
      E3();
      break;
    case float0:
    case real:
    case int0:
    case true0:
    case false0:
    case id:
    case popen:
      E4();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      jj_consume_token(id);
      break;
    case true0:
      jj_consume_token(true0);
      break;
    case false0:
      jj_consume_token(false0);
      break;
    case int0:
      jj_consume_token(int0);
      break;
    case real:
      jj_consume_token(real);
      break;
    case float0:
      jj_consume_token(float0);
      break;
    case popen:
      jj_consume_token(popen);
      E0();
      jj_consume_token(pclose);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP0a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case eq:
      jj_consume_token(eq);
      break;
    case ne:
      jj_consume_token(ne);
      break;
    case le:
      jj_consume_token(le);
      break;
    case lt:
      jj_consume_token(lt);
      break;
    case ge:
      jj_consume_token(ge);
      break;
    case gt:
      jj_consume_token(gt);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP0b() throws ParseException {
    jj_consume_token(or);
  }

  final public void OP1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case add:
      jj_consume_token(add);
      break;
    case sub:
      jj_consume_token(sub);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP2a() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
      jj_consume_token(mul);
      break;
    case div:
      jj_consume_token(div);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP2b() throws ParseException {
    jj_consume_token(and);
  }

  /** Generated Token Manager. */
  public AnalizadorSintacticoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300,0x20000,0x20000,0x3f002000,0x300000,0xc01000,0x34cc38,0x48c38,0x3f000000,0x300000,0xc00000,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintactico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintactico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintactico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintactico(AnalizadorSintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                                   }
